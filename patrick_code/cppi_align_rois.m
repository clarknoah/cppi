function [ output_args ] = cppi_align_rois()
%CPPI_ALIGN_ROIS Summary of this function goes here
%   Detailed explanation goes here

%This script coregisters an roi that is extracted from the average surface in freesurfer to the subjects functoinal space using spm coregistration routines.
%Since brain.nii may have been overwritten with new transformation, must run centralSulcAlignmentv2.sh prior to executing this script

%Lst of subjects - could make this automatic by scrolling directory
% subs = [0006, 0012, 0192, 0273, 0490, 0491, 0464, 0494, 0495, 0269, 0549, 0550, 0557, 0558, 0559, 0604, 0605, 0627];
subs = {'0006'};

%location of rois that are generated by centralSulcAlignmentv2
config = cppi_config();
hemis = {'lh', 'rh'};

for sub = subs;
    disp(char(sub));
    in_roi_dir = sprintf([config.paths.subjects_root '/%s_1/perm_test'],char(sub));   
    out_roi_dir = sprintf([config.paths.subjects_root '/%s_1/rois'],char(sub));
    
  for hemi = hemis;

    %load the volumetric rois that have been written by centralSulcAlignmentv2
    disp([sprintf('%s/hand_knob_%s.nii',in_roi_dir, char(hemi))]);

    hand_knob = load_untouch_nii(sprintf('%s/hand_knob_%s.nii',in_roi_dir, char(hemi)));
    BA4  = load_untouch_nii(sprintf('%s/%sBA4.nii', in_roi_dir, char(hemi)));
    BA123 = load_untouch_nii(sprintf('%s/%sBA123.nii', in_roi_dir, char(hemi)));
    BA6 = load_untouch_nii(sprintf('%s/%sBA6.nii', in_roi_dir, char(hemi)));
    mfg_crest = load_untouch_nii(sprintf('%s/mfg_crest_%s.nii',in_roi_dir, char(hemi)));


%Grab the medial frontal gyrus crest coordinates
    mfg_crest_coord = cppi_grab_coords(mfg_crest, 20, -20);
     
    %Grab the hand knob coordinates
    hand_knob_coord = cppi_grab_coords(hand_knob, 20, -20);

    %Crop BA4 based on hand knob coordinates
   
    switch char(hemi)
      case 'lh'
        c_max=[0,hand_knob_coord.z_max,0];
        c_min=[hand_knob_coord.x_min,hand_knob_coord.z_min,0];
        
        pmd_c_max=[mfg_crest_coord.x_coord,0,0];
        pmd_c_min=[hand_knob_coord.x_min+5,0,0];
        
        sma_c_max=[hand_knob_coord.x_coord - 25,hand_knob_coord.z_coord,0];
        sma_c_min=[0,0,0];
      case 'rh'
        c_max=[hand_knob_coord.x_max,hand_knob_coord.z_max,0];
        c_min=[0,hand_knob_coord.z_min,0];
        
        pmd_c_max=[mfg_crest_coord.x_coord,0,0; ...
            hand_knob_coord.x_max+5,0,0];
        pmd_c_min=[0,0,0];
        
        sma_c_max=[0,hand_knob_coord.z_coord,0];
        sma_c_min=[hand_knob_coord.x_coord + 25,0,0]
    end
    
    BA4_cropped = cppi_img_crop(BA4,c_max,c_min);
    BA4fn = sprintf('%s/%sBA4_cropped.nii', out_roi_dir, char(hemi));
    save_untouch_nii(BA4_cropped, BA4fn);
    BA123_cropped = cppi_img_crop(BA123,c_max,c_min); 
    BA123_temp = sprintf('%s/%sBA123_cropped_temp.nii', out_roi_dir, char(hemi));
    save_untouch_nii(BA123_cropped, BA123_temp);


    %Exclude voxels that are in both rois:
    intersectfn =  sprintf('%s/%sBA1234.nii', out_roi_dir, char(hemi));
    outfn = sprintf('%s/%sBA123_cropped.nii', out_roi_dir, char(hemi));
    removeOverlap(BA123_temp, BA4fn, intersectfn, outfn); %voxels are removed from first roi


    BA6_pmd = BA6;
    %[x,y,z] = ind2sub(size(BA6.img), find(BA6.img(:)));
    %XYZ = [x(:)';y(:)';z(:)'];
    %XYZ = XYZ';
    %XYZ(XYZ(:,1)>mfg_crest_coord.x_coord,:) = [];
    %switch char(hemi)
    %  case 'lh'
    %    XYZ(XYZ(:,1)<hand_knob_coord.x_min-5,:) = [];
    %  case 'rh'
    %    XYZ(XYZ(:,1)>hand_knob_coord.x_max+5,:) = [];
    %end
    %index = sub2ind(size(BA6.img), XYZ(:,1), XYZ(:,2), XYZ(:,3));
    %BA6_pmd.img = zeros(size(BA6.img));
    %BA6_pmd.img(index) = 10;
    BA6_pmd = cppi_img_crop(BA6,pmd_c_max,pmd_c_min);
    pmdfn = sprintf('%s/%sBA_pmd.nii', out_roi_dir, char(hemi));
    save_untouch_nii(BA6_pmd, pmdfn);

    
    %[x,y,z] = ind2sub(size(BA6.img), find(BA6.img(:)));
    %XYZ = [x(:)';y(:)';z(:)'];
    %XYZ = XYZ';
    %XYZ(XYZ(:,2)>hand_knob_coord.z_coord,:) = [];
    
    %switch char(hemi)
    %  case 'lh'
    %    XYZ(XYZ(:,1)>(hand_knob_coord.x_coord - 25),:) = [];
    %  case 'rh'
    %    XYZ(XYZ(:,1)<(hand_knob_coord.x_coord + 25),:) = [];
    %end
    %index = sub2ind(size(BA6.img), XYZ(:,1), XYZ(:,2), XYZ(:,3));
    %BA6_sma.img = zeros(size(BA6.img));
    %BA6_sma.img(index) = 10;
    BA6_sma = cppi_img_crop(BA6,sma_c_max,sma_c_min);
    smafn = sprintf('%s/%sBA_sma.nii', out_roi_dir, char(hemi));
    save_untouch_nii(BA6_sma, smafn);

    BA6_pmv = BA6;
    [x,y,z] = ind2sub(size(BA6.img), find(BA6.img(:)));
    XYZ = [x(:)';y(:)';z(:)'];
    XYZ = XYZ';
    XYZ(XYZ(:,1)<mfg_crest_coord.x_coord,:) = [];
    switch char(hemi)
      case 'lh'
        XYZ(XYZ(:,1)<hand_knob_coord.x_coord-20,:) = [];
      case 'rh'
        XYZ(XYZ(:,1)>hand_knob_coord.x_coord+20,:) = [];
    end

    index = sub2ind(size(BA6.img), XYZ(:,1), XYZ(:,2), XYZ(:,3));
    BA6_pmv.img = zeros(size(BA6.img));
    BA6_pmv.img(index) = 10;
    pmvfn = sprintf('%s/%sBA_pmv.nii', out_roi_dir, char(hemi));
    save_untouch_nii(BA6_pmv, pmvfn);

    %Coregister rois to epi space
    epi_space = sprintf('%s/aurRER_Run1_01.nii,1',in_roi_dir);
    source_image = sprintf('%s/brain.nii,1',in_roi_dir);
    %Rois to register
    roi1 = sprintf('%s/%sBA4_cropped.nii,1', out_roi_dir,  char(hemi));
    roi2 = sprintf('%s/%sBA123_cropped.nii,1', out_roi_dir,  char(hemi));
    roi3 = sprintf('%s/%sBA_pmd.nii,1', out_roi_dir,  char(hemi));
    roi4 = sprintf('%s/%sBA_sma.nii,1', out_roi_dir,  char(hemi));
    roi5 = sprintf('%s/%sBA_pmv.nii,1', out_roi_dir,  char(hemi));
    roi6 = sprintf('%s/l_sup_parietal.nii,1', out_roi_dir);
    A1 = sprintf('%s/A1.nii,1', out_roi_dir, char(hemi));
    coregToEpi(epi_space, source_image, roi1, roi2, roi3, roi4,roi5, roi6);

    rois = [];    
    for x=0:length(rois)
    end
    
    %Correct for those voxels that were included in both pmd and m1:
    intersectfn =  sprintf('%s/r_%sBA4_pmd.nii', out_roi_dir, char(hemi));
    outfn = sprintf('%s/r_%sBA_pmd.nii', out_roi_dir, char(hemi));
    roi1 = sprintf('%s/r_%sBA_pmd.nii', out_roi_dir, char(hemi));
    roi2 = sprintf('%s/r_%sBA4_cropped.nii', out_roi_dir, char(hemi));
    removeOverlap(roi1,roi2, intersectfn, outfn) %voxels are removed from first roi

    %Correct for those voxels that were included in both pmd and sma:
    intersectfn =  sprintf('%s/r_%sBA_pmd_sma.nii', out_roi_dir, char(hemi));
    outfn = sprintf('%s/r_%sBA_pmd.nii', out_roi_dir, char(hemi));
    roi1 = sprintf('%s/r_%sBA_pmd.nii', out_roi_dir, char(hemi));
    roi2 = sprintf('%s/r_%sBA_sma.nii', out_roi_dir, char(hemi));
    removeOverlap(roi1,roi2, intersectfn, outfn) %voxels are removed from first roi

    %Correct for those voxels that were included in both pmd and pmv:
    intersectfn =  sprintf('%s/r_%sBA_pmd_pmv.nii', out_roi_dir, char(hemi));
    outfn = sprintf('%s/r_%sBA_pmd.nii', out_roi_dir, char(hemi));
    roi1 = sprintf('%s/r_%sBA_pmd.nii', out_roi_dir, char(hemi));
    roi2 = sprintf('%s/r_%sBA_pmv.nii', out_roi_dir, char(hemi));
    removeOverlap(roi1,roi2, intersectfn, outfn) %voxels are removed from first roi

    %exclude voxels in M1 that are included in S1 -- ToDo the same for S1
    intersectfn =  sprintf('%s/r_%sBA1234.nii', out_roi_dir, char(hemi));
    outfn = sprintf('%s/r_%sBA4_cropped.nii', out_roi_dir, char(hemi));
    roi1 = sprintf('%s/r_%sBA4_cropped.nii', out_roi_dir, char(hemi));
    roi2 = sprintf('%s/r_%sBA123_cropped.nii', out_roi_dir, char(hemi));
    removeOverlap(roi1,roi2, intersectfn, outfn) %voxels are removed from first roi

    %Exclude voxels that are in both rois:
    intersectfn =  sprintf('%s/r_%sBA4_pmv.nii', out_roi_dir, char(hemi));
    outfn = sprintf('%s/r_%sBA_pmv.nii', out_roi_dir, char(hemi));
    roi1 = sprintf('%s/r_%sBA_pmv.nii', out_roi_dir, char(hemi));
    roi2 = sprintf('%s/r_%sBA4_cropped.nii', out_roi_dir, char(hemi));
    removeOverlap(roi1,roi2, intersectfn, outfn) %voxels are removed from first roi
  end
end

end

